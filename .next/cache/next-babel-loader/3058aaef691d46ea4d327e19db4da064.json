{"ast":null,"code":"import _Set from \"@babel/runtime-corejs2/core-js/set\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/Users/michaeldipaolo/Desktop/michaeldipaolo.com/my-next/components/beer/country.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Pie } from \"react-chartjs-2\";\nimport { MDBContainer } from \"mdbreact\"; //gets the unique countries in the object\n\nvar getUnqiue = function getUnqiue(object, key) {\n  var allElements = object.map(function (x) {\n    return x[key];\n  });\n\n  var unqiueElements = _toConsumableArray(new _Set(allElements));\n\n  return unqiueElements;\n}; //gets how many times those unique elements show up in the object \n\n\nvar getValues = function getValues(array, beer) {\n  var allBeer = beer.map(function (x) {\n    return x.country;\n  });\n  var values = [];\n  array.forEach(function (element) {\n    return values.push(countValues(allBeer, element));\n  });\n\n  var countValues = function countValues(array, element) {\n    return array.filter(function (v) {\n      return v === element;\n    }).length;\n  };\n\n  return values;\n};\n\nvar Types = function Types(props) {\n  var labels = getUnqiue(props.beer, 'country');\n  var data = getValues(labels, props.beer);\n  var colors = [\"red\", \"blue\", \"yellow\", \"green\", \"brown\"];\n  var asdf = {\n    dataPie: {\n      labels: labels,\n      datasets: [{\n        data: data,\n        backgroundColor: colors,\n        hoverBackgroundColor: colors\n      }]\n    }\n  };\n  return __jsx(MDBContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, __jsx(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"Country of Origin\"), __jsx(Pie, {\n    data: asdf.dataPie,\n    options: {\n      responsive: true\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }));\n};\n\nexport default Types;","map":{"version":3,"sources":["/Users/michaeldipaolo/Desktop/michaeldipaolo.com/my-next/components/beer/country.js"],"names":["React","Pie","MDBContainer","getUnqiue","object","key","allElements","map","x","unqiueElements","getValues","array","beer","allBeer","country","values","forEach","element","push","countValues","filter","v","length","Types","props","labels","data","colors","asdf","dataPie","datasets","backgroundColor","hoverBackgroundColor","responsive"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,SAASC,YAAT,QAA6B,UAA7B,C,CAEA;;AACA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,MAAD,EAASC,GAAT,EAAiB;AACjC,MAAMC,WAAW,GAAGF,MAAM,CAACG,GAAP,CAAW,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAACH,GAAD,CAAL;AAAA,GAAZ,CAApB;;AACA,MAAMI,cAAc,sBAAS,SAAQH,WAAR,CAAT,CAApB;;AACA,SAAOG,cAAP;AACD,CAJD,C,CAMA;;;AACA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAQC,IAAR,EAAgB;AAChC,MAAMC,OAAO,GAAGD,IAAI,CAACL,GAAL,CAAS,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAACM,OAAN;AAAA,GAAV,CAAhB;AAEA,MAAIC,MAAM,GAAG,EAAb;AACAJ,EAAAA,KAAK,CAACK,OAAN,CAAc,UAAAC,OAAO;AAAA,WAAIF,MAAM,CAACG,IAAP,CAAYC,WAAW,CAACN,OAAD,EAAUI,OAAV,CAAvB,CAAJ;AAAA,GAArB;;AAEA,MAAME,WAAW,GAAG,SAAdA,WAAc,CAACR,KAAD,EAAQM,OAAR,EAAoB;AACtC,WAAON,KAAK,CAACS,MAAN,CAAa,UAACC,CAAD;AAAA,aAAQA,CAAC,KAAKJ,OAAd;AAAA,KAAb,EAAqCK,MAA5C;AACD,GAFD;;AAIA,SAAOP,MAAP;AACD,CAXD;;AAaA,IAAMQ,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD,EAAW;AAEvB,MAAMC,MAAM,GAAGtB,SAAS,CAACqB,KAAK,CAACZ,IAAP,EAAa,SAAb,CAAxB;AACA,MAAMc,IAAI,GAAGhB,SAAS,CAACe,MAAD,EAASD,KAAK,CAACZ,IAAf,CAAtB;AACA,MAAMe,MAAM,GAAG,CACb,KADa,EAEb,MAFa,EAGb,QAHa,EAIb,OAJa,EAKb,OALa,CAAf;AAQA,MAAMC,IAAI,GAAG;AACXC,IAAAA,OAAO,EAAE;AACPJ,MAAAA,MAAM,EAAEA,MADD;AAEPK,MAAAA,QAAQ,EAAE,CACR;AACEJ,QAAAA,IAAI,EAAEA,IADR;AAEEK,QAAAA,eAAe,EAAEJ,MAFnB;AAGEK,QAAAA,oBAAoB,EAAEL;AAHxB,OADQ;AAFH;AADE,GAAb;AAaA,SACE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,EAEE,MAAC,GAAD;AAAK,IAAA,IAAI,EAAEC,IAAI,CAACC,OAAhB;AAAyB,IAAA,OAAO,EAAE;AAAEI,MAAAA,UAAU,EAAE;AAAd,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD,CA/BD;;AAiCA,eAAgBV,KAAhB","sourcesContent":["import React from 'react';\nimport { Pie } from \"react-chartjs-2\";\nimport { MDBContainer } from \"mdbreact\";\n\n//gets the unique countries in the object\nconst getUnqiue = (object, key) => {\n  const allElements = object.map(x => x[key]);\n  const unqiueElements = ([... new Set(allElements)]);\n  return unqiueElements;\n}\n\n//gets how many times those unique elements show up in the object \nconst getValues = (array, beer) =>{\n  const allBeer = beer.map(x => x.country);\n\n  let values = [];\n  array.forEach(element => values.push(countValues(allBeer, element)));\n  \n  const countValues = (array, element) => {\n    return(array.filter((v) => (v === element)).length);\n  }\n\n  return values;\n}\n\nconst Types = (props) => {\n\n  const labels = getUnqiue(props.beer, 'country');\n  const data = getValues(labels, props.beer);\n  const colors = [\n    \"red\",\n    \"blue\",\n    \"yellow\",\n    \"green\",\n    \"brown\",\n  ];\n\n  const asdf = {\n    dataPie: {\n      labels: labels,\n      datasets: [\n        {\n          data: data,\n          backgroundColor: colors,\n          hoverBackgroundColor: colors\n        }\n      ]\n    }\n  }\n\n  return (\n    <MDBContainer>\n      <h3>Country of Origin</h3>\n      <Pie data={asdf.dataPie} options={{ responsive: true }} />\n    </MDBContainer>\n  )\n}\n\nexport default (Types);"]},"metadata":{},"sourceType":"module"}