{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/michaeldipaolo/Desktop/michaeldipaolo.com/my-next/components/beer/table.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { useTable, useSortBy } from 'react-table';\n\nfunction Table(_ref) {\n  var columns = _ref.columns,\n      data = _ref.data;\n\n  var _useTable = useTable({\n    columns: columns,\n    data: data\n  }, useSortBy),\n      getTableProps = _useTable.getTableProps,\n      getTableBodyProps = _useTable.getTableBodyProps,\n      headerGroups = _useTable.headerGroups,\n      rows = _useTable.rows,\n      prepareRow = _useTable.prepareRow; // We don't want to render all 2000 rows for this example, so cap\n  // it at 20 for this use case\n\n\n  var firstPageRows = rows.slice(0, 20);\n  return __jsx(React.Fragment, null, __jsx(\"table\", _extends({}, getTableProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }), __jsx(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, headerGroups.map(function (headerGroup) {\n    return __jsx(\"tr\", _extends({}, headerGroup.getHeaderGroupProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }), headerGroup.headers.map(function (column) {\n      return (// Add the sorting props to control sorting. For this example\n        // we can add them into the header props\n        __jsx(\"th\", _extends({}, column.getHeaderProps(column.getSortByToggleProps()), {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        }), column.render('Header'), __jsx(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        }, column.isSorted ? column.isSortedDesc ? ' ðŸ”½' : ' ðŸ”¼' : ''))\n      );\n    }));\n  })), __jsx(\"tbody\", _extends({}, getTableBodyProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), firstPageRows.map(function (row, i) {\n    prepareRow(row);\n    return __jsx(\"tr\", _extends({}, row.getRowProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }), row.cells.map(function (cell) {\n      return __jsx(\"td\", _extends({}, cell.getCellProps(), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }), cell.render('Cell'));\n    }));\n  }))), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"Showing the first 20 results of \", rows.length, \" rows\"));\n}\n\nvar Tbl = function Tbl(beer) {\n  var columns = React.useMemo(function () {\n    return [{\n      Header: 'Beer',\n      columns: [{\n        Header: 'Name',\n        accessor: 'firstName'\n      }, {\n        Header: 'Type',\n        accessor: 'lastName'\n      }]\n    }];\n  }, []);\n  var data = beer.allbeer;\n  return __jsx(Table, {\n    columns: columns,\n    data: data,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  });\n};\n\nexport default Tbl;","map":{"version":3,"sources":["/Users/michaeldipaolo/Desktop/michaeldipaolo.com/my-next/components/beer/table.js"],"names":["React","useTable","useSortBy","Table","columns","data","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","firstPageRows","slice","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","i","getRowProps","cells","cell","getCellProps","length","Tbl","beer","useMemo","Header","accessor","allbeer"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useTable, useSortBy } from 'react-table';\n\nfunction Table({ columns, data }) {\n    const {\n      getTableProps,\n      getTableBodyProps,\n      headerGroups,\n      rows,\n      prepareRow,\n    } = useTable(\n      {\n        columns,\n        data,\n      },\n      useSortBy\n    )\n  \n    // We don't want to render all 2000 rows for this example, so cap\n    // it at 20 for this use case\n    const firstPageRows = rows.slice(0, 20)\n  \n    return (\n      <>\n        <table {...getTableProps()}>\n          <thead>\n            {headerGroups.map(headerGroup => (\n              <tr {...headerGroup.getHeaderGroupProps()}>\n                {headerGroup.headers.map(column => (\n                  // Add the sorting props to control sorting. For this example\n                  // we can add them into the header props\n                  <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                    {column.render('Header')}\n                    {/* Add a sort direction indicator */}\n                    <span>\n                      {column.isSorted\n                        ? column.isSortedDesc\n                          ? ' ðŸ”½'\n                          : ' ðŸ”¼'\n                        : ''}\n                    </span>\n                  </th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n          <tbody {...getTableBodyProps()}>\n            {firstPageRows.map(\n              (row, i) => {\n                prepareRow(row);\n                return (\n                  <tr {...row.getRowProps()}>\n                    {row.cells.map(cell => {\n                      return (\n                        <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                      )\n                    })}\n                  </tr>\n                )}\n            )}\n          </tbody>\n        </table>\n        <br />\n        <div>Showing the first 20 results of {rows.length} rows</div>\n      </>\n    )\n}\n\nconst Tbl = (beer) => {\n    const columns = React.useMemo(\n        () => [\n          {\n            Header: 'Beer',\n            columns: [\n              {\n                Header: 'Name',\n                accessor: 'firstName',\n              },\n              {\n                Header: 'Type',\n                accessor: 'lastName',\n              },\n            ],\n          },\n        ],\n        []\n      )\n    \n      const data = beer.allbeer;\n    \n      return (\n        <Table columns={columns} data={data} />\n      )\n}\n\nexport default (Tbl);"]},"metadata":{},"sourceType":"module"}