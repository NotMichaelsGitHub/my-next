{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst initialState = {\n  board: [[' ', ' ', ' '], [' ', ' ', ' '], [' ', ' ', ' ']],\n  turn: 0,\n  players: 2,\n  gameOver: false,\n  xWins: 0,\n  oWins: 0,\n  whosTurn: 'X'\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case 'MAKE_MOVE':\n      if (state.gameOver === true) {\n        return state;\n      }\n\n      const newBoard = state.board;\n\n      if (newBoard[action.location.x][action.location.y] !== ' ') {\n        return state;\n      }\n\n      if (state.turn % 2 === 0) {\n        newBoard[action.location.x][action.location.y] = 'X';\n        return makeMove(state, newBoard, 'X');\n      }\n\n      newBoard[action.location.x][action.location.y] = '0';\n      return makeMove(state, newBoard, '0');\n\n    case 'DEBUG_INCREMENT_TURN':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        turn: state.turn + 1\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction makeMove(state, newBoard, player) {\n  let score = state.xWins;\n  let gameOver = state.gameOver;\n\n  if (check(newBoard, player) === true) {\n    score += 1;\n    gameOver = true;\n  }\n\n  if (state.whosTurn === 'X') {\n    state.whosTurn = '0';\n  } else {\n    state.whosTurn = 'X';\n  }\n\n  if (player === 'X') {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      turn: state.turn + 1,\n      board: newBoard,\n      gameOver: gameOver,\n      xWins: score\n    });\n  }\n\n  return _objectSpread(_objectSpread({}, state), {}, {\n    turn: state.turn + 1,\n    board: newBoard,\n    gameOver: gameOver,\n    oWins: score\n  });\n}\n\nfunction check(board, player) {\n  //check x \n  for (let x = 0; x < 3; x++) {\n    if (board[x][0] === player && board[x][1] === player && board[x][2] === player) {\n      console.log('game over');\n      console.log(player + ' wins!');\n      return true;\n    }\n  } //check y\n\n\n  for (let y = 0; y < 3; y++) {\n    if (board[0][y] === player && board[1][y] === player && board[2][y] === player) {\n      console.log('game over');\n      console.log(player + ' wins!');\n      return true;\n    }\n  } //diagnal 1\n\n\n  if (board[0][0] === player && board[1][1] === player && board[2][2] === player) {\n    console.log('game over');\n    console.log(player + ' wins!');\n    return true;\n  } //diagnal 2\n\n\n  if (board[0][2] === player && board[1][1] === player && board[2][0] === player) {\n    console.log('game over!');\n    console.log(player + ' wins!');\n    return true;\n  } //if nothing \n\n\n  return false;\n}","map":{"version":3,"sources":["/Users/michaeldipaolo/Desktop/michaeldipaolo.com/my-next/reducers/GameState.js"],"names":["initialState","board","turn","players","gameOver","xWins","oWins","whosTurn","state","action","type","newBoard","location","x","y","makeMove","player","score","check","console","log"],"mappings":"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","sourcesContent":["const initialState = {  \r\n  board: \r\n    [\r\n      [ ' ' , ' ' , ' ' ],\r\n      [ ' ' , ' ' , ' ' ],\r\n      [ ' ' , ' ' , ' ' ],\r\n    ],\r\n  turn: 0,\r\n  players: 2,\r\n  gameOver: false,\r\n  xWins: 0,\r\n  oWins: 0,\r\n  whosTurn: 'X', \r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n\r\n  switch(action.type){\r\n        \r\n  case 'MAKE_MOVE':\r\n\r\n    if(state.gameOver === true){\r\n      return state;\r\n    }\r\n            \r\n    const newBoard = state.board;\r\n    if(newBoard[action.location.x][action.location.y] !== ' '){\r\n      return state;\r\n    }\r\n                \r\n    if(state.turn%2 === 0){\r\n      newBoard[action.location.x][action.location.y] = 'X';  \r\n      return makeMove(state, newBoard, 'X');\r\n    }\r\n                    \r\n    newBoard[action.location.x][action.location.y] = '0'; \r\n    return makeMove(state, newBoard, '0');\r\n                      \r\n                \r\n            \r\n\r\n\r\n  case 'DEBUG_INCREMENT_TURN':\r\n    return {\r\n      ...state,\r\n      turn: state.turn + 1,\r\n    };\r\n\r\n  default:\r\n    return state;   \r\n  }\r\n    \r\n}\r\n\r\n\r\nfunction makeMove(state, newBoard, player){\r\n  let score = state.xWins;\r\n  let gameOver = state.gameOver;\r\n    \r\n  if(check(newBoard, player) === true) {\r\n    score +=1;\r\n    gameOver = true;\r\n  }\r\n\r\n  if(state.whosTurn === 'X'){\r\n    state.whosTurn = '0';\r\n  }\r\n  else{\r\n    state.whosTurn = 'X';\r\n  }\r\n\r\n  if(player === 'X'){\r\n    return {\r\n      ...state,\r\n      turn: state.turn + 1,\r\n      board: newBoard,\r\n      gameOver: gameOver,\r\n      xWins: score,\r\n    };\r\n  }\r\n    \r\n  return {\r\n    ...state,\r\n    turn: state.turn + 1,\r\n    board: newBoard,\r\n    gameOver: gameOver,\r\n    oWins: score,\r\n  };\r\n    \r\n\r\n    \r\n}\r\n\r\n\r\nfunction check(board, player){\r\n\r\n  //check x \r\n  for (let x = 0; x <3; x++){\r\n    if(\r\n      board[x][0] === player &&\r\n            board[x][1] === player &&\r\n            board[x][2] === player )\r\n    {\r\n      console.log('game over');\r\n      console.log(player + ' wins!');\r\n      return true;\r\n    }\r\n  }\r\n\r\n  //check y\r\n  for (let y = 0; y <3; y++){\r\n    if(\r\n      board[0][y] === player &&\r\n            board[1][y] === player &&\r\n            board[2][y] === player )\r\n    {\r\n      console.log('game over');\r\n      console.log(player + ' wins!');\r\n      return true;\r\n    }\r\n  }\r\n\r\n  //diagnal 1\r\n  if(\r\n    board[0][0] === player &&\r\n        board[1][1] === player &&\r\n        board[2][2] === player )\r\n  {\r\n    console.log('game over');\r\n    console.log(player + ' wins!');\r\n    return true;\r\n  }\r\n\r\n  //diagnal 2\r\n  if(\r\n    board[0][2] === player &&\r\n        board[1][1] === player &&\r\n        board[2][0] === player )\r\n  {\r\n    console.log('game over!');\r\n    console.log(player + ' wins!');\r\n    return true;\r\n  }\r\n\r\n  //if nothing \r\n  return false;\r\n}"]},"metadata":{},"sourceType":"module"}