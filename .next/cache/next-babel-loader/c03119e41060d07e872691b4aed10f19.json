{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar initialState = {\n  board: [[' ', ' ', ' '], [' ', ' ', ' '], [' ', ' ', ' ']],\n  turn: 0,\n  players: 2,\n  gameOver: false,\n  xWins: 0,\n  oWins: 0,\n  whosTurn: 'X'\n};\nexport default function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'MAKE_MOVE':\n      if (state.gameOver === true) {\n        return state;\n      }\n\n      var newBoard = state.board;\n\n      if (newBoard[action.location.x][action.location.y] !== ' ') {\n        return state;\n      }\n\n      if (state.turn % 2 === 0) {\n        newBoard[action.location.x][action.location.y] = 'X';\n        return makeMove(state, newBoard, 'X');\n      }\n\n      newBoard[action.location.x][action.location.y] = '0';\n      return makeMove(state, newBoard, '0');\n\n    case 'DEBUG_INCREMENT_TURN':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        turn: state.turn + 1\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction makeMove(state, newBoard, player) {\n  var score = state.xWins;\n  var gameOver = state.gameOver;\n\n  if (check(newBoard, player) === true) {\n    score += 1;\n    gameOver = true;\n  }\n\n  if (state.whosTurn === 'X') {\n    state.whosTurn = '0';\n  } else {\n    state.whosTurn = 'X';\n  }\n\n  if (player === 'X') {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      turn: state.turn + 1,\n      board: newBoard,\n      gameOver: gameOver,\n      xWins: score\n    });\n  }\n\n  return _objectSpread(_objectSpread({}, state), {}, {\n    turn: state.turn + 1,\n    board: newBoard,\n    gameOver: gameOver,\n    oWins: score\n  });\n}\n\nfunction check(board, player) {\n  //check x \n  for (var x = 0; x < 3; x++) {\n    if (board[x][0] === player && board[x][1] === player && board[x][2] === player) {\n      console.log('game over');\n      console.log(player + ' wins!');\n      return true;\n    }\n  } //check y\n\n\n  for (var y = 0; y < 3; y++) {\n    if (board[0][y] === player && board[1][y] === player && board[2][y] === player) {\n      console.log('game over');\n      console.log(player + ' wins!');\n      return true;\n    }\n  } //diagnal 1\n\n\n  if (board[0][0] === player && board[1][1] === player && board[2][2] === player) {\n    console.log('game over');\n    console.log(player + ' wins!');\n    return true;\n  } //diagnal 2\n\n\n  if (board[0][2] === player && board[1][1] === player && board[2][0] === player) {\n    console.log('game over!');\n    console.log(player + ' wins!');\n    return true;\n  } //if nothing \n\n\n  return false;\n}","map":null,"metadata":{},"sourceType":"module"}