{"ast":null,"code":"var _jsxFileName = \"/Users/michaeldipaolo/Desktop/michaeldipaolo.com/my-next/components/beer/country.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Pie } from \"react-chartjs-2\";\nimport { MDBContainer } from \"mdbreact\"; //gets the unique countries in the object\n\nconst getUnqiue = (object, key) => {\n  const allElements = object.map(x => x[key]);\n  const unqiueElements = [...new Set(allElements)];\n  return unqiueElements;\n}; //gets how many times those unique elements show up in the object \n\n\nconst getValues = (array, beer) => {\n  console.log(\"array= \" + array);\n  let values = [];\n  array.forEach(element => values.push(countValues(beer, element)));\n  return values;\n};\n\nconst countValues = (array, element) => {\n  console.log(array);\n  console.log(element);\n  return array.filter(v => v === 'name').length;\n};\n\nconst Types = props => {\n  const labels = getUnqiue(props.beer, 'country');\n  console.log(getValues(labels, props.beer));\n  const data = [11, 11, 11, 11];\n  const colors = [\"red\", \"blue\", \"yellow\", \"green\", \"brown\"];\n  const asdf = {\n    dataPie: {\n      labels: labels,\n      datasets: [{\n        data: data,\n        backgroundColor: colors,\n        hoverBackgroundColor: colors\n      }]\n    }\n  };\n  return __jsx(MDBContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, __jsx(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"Country of Origin\"), __jsx(Pie, {\n    data: asdf.dataPie,\n    options: {\n      responsive: true\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }));\n};\n\nexport default Types;","map":{"version":3,"sources":["/Users/michaeldipaolo/Desktop/michaeldipaolo.com/my-next/components/beer/country.js"],"names":["React","Pie","MDBContainer","getUnqiue","object","key","allElements","map","x","unqiueElements","Set","getValues","array","beer","console","log","values","forEach","element","push","countValues","filter","v","length","Types","props","labels","data","colors","asdf","dataPie","datasets","backgroundColor","hoverBackgroundColor","responsive"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,SAASC,YAAT,QAA6B,UAA7B,C,CAEA;;AACA,MAAMC,SAAS,GAAG,CAACC,MAAD,EAASC,GAAT,KAAiB;AACjC,QAAMC,WAAW,GAAGF,MAAM,CAACG,GAAP,CAAWC,CAAC,IAAIA,CAAC,CAACH,GAAD,CAAjB,CAApB;AACA,QAAMI,cAAc,GAAI,CAAC,GAAI,IAAIC,GAAJ,CAAQJ,WAAR,CAAL,CAAxB;AACA,SAAOG,cAAP;AACD,CAJD,C,CAMA;;;AACA,MAAME,SAAS,GAAG,CAACC,KAAD,EAAQC,IAAR,KAAgB;AAChCC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAYH,KAAxB;AAEA,MAAII,MAAM,GAAG,EAAb;AACAJ,EAAAA,KAAK,CAACK,OAAN,CAAcC,OAAO,IAAIF,MAAM,CAACG,IAAP,CAAYC,WAAW,CAACP,IAAD,EAAOK,OAAP,CAAvB,CAAzB;AAEA,SAAOF,MAAP;AACD,CAPD;;AASA,MAAMI,WAAW,GAAG,CAACR,KAAD,EAAQM,OAAR,KAAoB;AACtCJ,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYG,OAAZ;AACA,SAAON,KAAK,CAACS,MAAN,CAAcC,CAAD,IAAQA,CAAC,KAAK,MAA3B,EAAoCC,MAA3C;AACD,CAJD;;AAMA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AAEvB,QAAMC,MAAM,GAAGvB,SAAS,CAACsB,KAAK,CAACZ,IAAP,EAAa,SAAb,CAAxB;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,SAAS,CAACe,MAAD,EAASD,KAAK,CAACZ,IAAf,CAArB;AAEA,QAAMc,IAAI,GAAG,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,CAAb;AACA,QAAMC,MAAM,GAAG,CACb,KADa,EAEb,MAFa,EAGb,QAHa,EAIb,OAJa,EAKb,OALa,CAAf;AAQA,QAAMC,IAAI,GAAG;AACXC,IAAAA,OAAO,EAAE;AACPJ,MAAAA,MAAM,EAAEA,MADD;AAEPK,MAAAA,QAAQ,EAAE,CACR;AACEJ,QAAAA,IAAI,EAAEA,IADR;AAEEK,QAAAA,eAAe,EAAEJ,MAFnB;AAGEK,QAAAA,oBAAoB,EAAEL;AAHxB,OADQ;AAFH;AADE,GAAb;AAaA,SACE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,EAEE,MAAC,GAAD;AAAK,IAAA,IAAI,EAAEC,IAAI,CAACC,OAAhB;AAAyB,IAAA,OAAO,EAAE;AAAEI,MAAAA,UAAU,EAAE;AAAd,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD,CAlCD;;AAoCA,eAAgBV,KAAhB","sourcesContent":["import React from 'react';\nimport { Pie } from \"react-chartjs-2\";\nimport { MDBContainer } from \"mdbreact\";\n\n//gets the unique countries in the object\nconst getUnqiue = (object, key) => {\n  const allElements = object.map(x => x[key]);\n  const unqiueElements = ([... new Set(allElements)]);\n  return unqiueElements;\n}\n\n//gets how many times those unique elements show up in the object \nconst getValues = (array, beer) =>{\n  console.log(\"array= \" + array)\n\n  let values = [];\n  array.forEach(element => values.push(countValues(beer, element)));\n  \n  return values;\n}\n\nconst countValues = (array, element) => {\n  console.log(array);\n  console.log(element);\n  return(array.filter((v) => (v === 'name')).length);\n}\n\nconst Types = (props) => {\n\n  const labels = getUnqiue(props.beer, 'country');\n\n  console.log(getValues(labels, props.beer));\n\n  const data = [11, 11, 11, 11];\n  const colors = [\n    \"red\",\n    \"blue\",\n    \"yellow\",\n    \"green\",\n    \"brown\",\n  ];\n\n  const asdf = {\n    dataPie: {\n      labels: labels,\n      datasets: [\n        {\n          data: data,\n          backgroundColor: colors,\n          hoverBackgroundColor: colors\n        }\n      ]\n    }\n  }\n\n  return (\n    <MDBContainer>\n      <h3>Country of Origin</h3>\n      <Pie data={asdf.dataPie} options={{ responsive: true }} />\n    </MDBContainer>\n  )\n}\n\nexport default (Types);"]},"metadata":{},"sourceType":"module"}