{"ast":null,"code":"var _jsxFileName = \"/Users/michaeldipaolo/Desktop/michaeldipaolo.com/my-next/components/beer/table.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { useTable, useSortBy } from 'react-table';\n\nfunction Table({\n  columns,\n  data\n}) {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data\n  }, useSortBy); // We don't want to render all 2000 rows for this example, so cap\n  // it at 20 for this use case\n\n  const firstPageRows = rows.slice(0, 20);\n  return __jsx(React.Fragment, null, __jsx(\"table\", _extends({}, getTableProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }), __jsx(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, headerGroups.map(headerGroup => __jsx(\"tr\", _extends({}, headerGroup.getHeaderGroupProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }), headerGroup.headers.map(column => // Add the sorting props to control sorting. For this example\n  // we can add them into the header props\n  __jsx(\"th\", _extends({}, column.getHeaderProps(column.getSortByToggleProps()), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }), column.render('Header'), __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, column.isSorted ? column.isSortedDesc ? ' ðŸ”½' : ' ðŸ”¼' : '')))))), __jsx(\"tbody\", _extends({}, getTableBodyProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), firstPageRows.map((row, i) => {\n    prepareRow(row);\n    return __jsx(\"tr\", _extends({}, row.getRowProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }), row.cells.map(cell => {\n      return __jsx(\"td\", _extends({}, cell.getCellProps(), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }), cell.render('Cell'));\n    }));\n  }))), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"Showing the first 20 results of \", rows.length, \" rows\"));\n}\n\nconst Tbl = beer => {\n  const columns = React.useMemo(() => [{\n    Header: 'Beer',\n    columns: [{\n      Header: 'Name',\n      accessor: 'firstName'\n    }, {\n      Header: 'Type',\n      accessor: 'lastName'\n    }]\n  }], []);\n  const data = beer.allbeer;\n  return __jsx(Table, {\n    columns: columns,\n    data: data,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  });\n};\n\nexport default Tbl;","map":{"version":3,"sources":["/Users/michaeldipaolo/Desktop/michaeldipaolo.com/my-next/components/beer/table.js"],"names":["React","useTable","useSortBy","Table","columns","data","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","firstPageRows","slice","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","i","getRowProps","cells","cell","getCellProps","length","Tbl","beer","useMemo","Header","accessor","allbeer"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,aAApC;;AAEA,SAASC,KAAT,CAAe;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAf,EAAkC;AAC9B,QAAM;AACJC,IAAAA,aADI;AAEJC,IAAAA,iBAFI;AAGJC,IAAAA,YAHI;AAIJC,IAAAA,IAJI;AAKJC,IAAAA;AALI,MAMFT,QAAQ,CACV;AACEG,IAAAA,OADF;AAEEC,IAAAA;AAFF,GADU,EAKVH,SALU,CANZ,CAD8B,CAe9B;AACA;;AACA,QAAMS,aAAa,GAAGF,IAAI,CAACG,KAAL,CAAW,CAAX,EAAc,EAAd,CAAtB;AAEA,SACE,4BACE,4BAAWN,aAAa,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,YAAY,CAACK,GAAb,CAAiBC,WAAW,IAC3B,yBAAQA,WAAW,CAACC,mBAAZ,EAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACGD,WAAW,CAACE,OAAZ,CAAoBH,GAApB,CAAwBI,MAAM,IAC7B;AACA;AACA,2BAAQA,MAAM,CAACC,cAAP,CAAsBD,MAAM,CAACE,oBAAP,EAAtB,CAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACGF,MAAM,CAACG,MAAP,CAAc,QAAd,CADH,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,MAAM,CAACI,QAAP,GACGJ,MAAM,CAACK,YAAP,GACE,KADF,GAEE,KAHL,GAIG,EALN,CAHF,CAHD,CADH,CADD,CADH,CADF,EAsBE,4BAAWf,iBAAiB,EAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACGI,aAAa,CAACE,GAAd,CACC,CAACU,GAAD,EAAMC,CAAN,KAAY;AACVd,IAAAA,UAAU,CAACa,GAAD,CAAV;AACA,WACE,yBAAQA,GAAG,CAACE,WAAJ,EAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACGF,GAAG,CAACG,KAAJ,CAAUb,GAAV,CAAcc,IAAI,IAAI;AACrB,aACE,yBAAQA,IAAI,CAACC,YAAL,EAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAA8BD,IAAI,CAACP,MAAL,CAAY,MAAZ,CAA9B,CADF;AAGD,KAJA,CADH,CADF;AAQE,GAXL,CADH,CAtBF,CADF,EAuCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAvCF,EAwCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAAsCX,IAAI,CAACoB,MAA3C,UAxCF,CADF;AA4CH;;AAED,MAAMC,GAAG,GAAIC,IAAD,IAAU;AAClB,QAAM3B,OAAO,GAAGJ,KAAK,CAACgC,OAAN,CACZ,MAAM,CACJ;AACEC,IAAAA,MAAM,EAAE,MADV;AAEE7B,IAAAA,OAAO,EAAE,CACP;AACE6B,MAAAA,MAAM,EAAE,MADV;AAEEC,MAAAA,QAAQ,EAAE;AAFZ,KADO,EAKP;AACED,MAAAA,MAAM,EAAE,MADV;AAEEC,MAAAA,QAAQ,EAAE;AAFZ,KALO;AAFX,GADI,CADM,EAgBZ,EAhBY,CAAhB;AAmBE,QAAM7B,IAAI,GAAG0B,IAAI,CAACI,OAAlB;AAEA,SACE,MAAC,KAAD;AAAO,IAAA,OAAO,EAAE/B,OAAhB;AAAyB,IAAA,IAAI,EAAEC,IAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAGL,CAzBD;;AA2BA,eAAgByB,GAAhB","sourcesContent":["import React from 'react';\nimport { useTable, useSortBy } from 'react-table';\n\nfunction Table({ columns, data }) {\n    const {\n      getTableProps,\n      getTableBodyProps,\n      headerGroups,\n      rows,\n      prepareRow,\n    } = useTable(\n      {\n        columns,\n        data,\n      },\n      useSortBy\n    )\n  \n    // We don't want to render all 2000 rows for this example, so cap\n    // it at 20 for this use case\n    const firstPageRows = rows.slice(0, 20)\n  \n    return (\n      <>\n        <table {...getTableProps()}>\n          <thead>\n            {headerGroups.map(headerGroup => (\n              <tr {...headerGroup.getHeaderGroupProps()}>\n                {headerGroup.headers.map(column => (\n                  // Add the sorting props to control sorting. For this example\n                  // we can add them into the header props\n                  <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                    {column.render('Header')}\n                    {/* Add a sort direction indicator */}\n                    <span>\n                      {column.isSorted\n                        ? column.isSortedDesc\n                          ? ' ðŸ”½'\n                          : ' ðŸ”¼'\n                        : ''}\n                    </span>\n                  </th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n          <tbody {...getTableBodyProps()}>\n            {firstPageRows.map(\n              (row, i) => {\n                prepareRow(row);\n                return (\n                  <tr {...row.getRowProps()}>\n                    {row.cells.map(cell => {\n                      return (\n                        <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                      )\n                    })}\n                  </tr>\n                )}\n            )}\n          </tbody>\n        </table>\n        <br />\n        <div>Showing the first 20 results of {rows.length} rows</div>\n      </>\n    )\n}\n\nconst Tbl = (beer) => {\n    const columns = React.useMemo(\n        () => [\n          {\n            Header: 'Beer',\n            columns: [\n              {\n                Header: 'Name',\n                accessor: 'firstName',\n              },\n              {\n                Header: 'Type',\n                accessor: 'lastName',\n              },\n            ],\n          },\n        ],\n        []\n      )\n    \n      const data = beer.allbeer;\n    \n      return (\n        <Table columns={columns} data={data} />\n      )\n}\n\nexport default (Tbl);"]},"metadata":{},"sourceType":"module"}