{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar initialState = {\n  board: [[\" \", \" \", \" \"], [\" \", \" \", \" \"], [\" \", \" \", \" \"]],\n  turn: 0,\n  players: 2,\n  gameOver: false,\n  xWins: 0,\n  oWins: 0,\n  whosTurn: \"X\"\n};\nexport default function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"MAKE_MOVE\":\n      if (state.gameOver === true) {\n        return state;\n      } else {\n        var newBoard = state.board;\n\n        if (newBoard[action.location.x][action.location.y] !== \" \") {\n          return state;\n        } else {\n          if (state.turn % 2 === 0) {\n            newBoard[action.location.x][action.location.y] = \"X\";\n            return makeMove(state, newBoard, \"X\");\n          } else {\n            newBoard[action.location.x][action.location.y] = \"0\";\n            return makeMove(state, newBoard, \"0\");\n          }\n        }\n      }\n\n    case \"DEBUG_INCREMENT_TURN\":\n      return _objectSpread({}, state, {\n        turn: state.turn + 1\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction makeMove(state, newBoard, player) {\n  var score = state.xWins;\n  var gameOver = state.gameOver;\n\n  if (check(newBoard, player) === true) {\n    score += 1;\n    gameOver = true;\n  }\n\n  if (state.whosTurn === \"X\") {\n    state.whosTurn = \"0\";\n  } else {\n    state.whosTurn = \"X\";\n  }\n\n  if (player === \"X\") {\n    return _objectSpread({}, state, {\n      turn: state.turn + 1,\n      board: newBoard,\n      gameOver: gameOver,\n      xWins: score\n    });\n  } else {\n    return _objectSpread({}, state, {\n      turn: state.turn + 1,\n      board: newBoard,\n      gameOver: gameOver,\n      oWins: score\n    });\n  }\n}\n\nfunction check(board, player) {\n  //check x \n  for (var x = 0; x < 3; x++) {\n    if (board[x][0] === player && board[x][1] === player && board[x][2] === player) {\n      console.log(\"game over\");\n      console.log(player + \" wins!\");\n      return true;\n    }\n  } //check y\n\n\n  for (var y = 0; y < 3; y++) {\n    if (board[0][y] === player && board[1][y] === player && board[2][y] === player) {\n      console.log(\"game over\");\n      console.log(player + \" wins!\");\n      return true;\n    }\n  } //diagnal 1\n\n\n  if (board[0][0] === player && board[1][1] === player && board[2][2] === player) {\n    console.log(\"game over\");\n    console.log(player + \" wins!\");\n    return true;\n  } //diagnal 2\n\n\n  if (board[0][2] === player && board[1][1] === player && board[2][0] === player) {\n    console.log(\"game over!\");\n    console.log(player + \" wins!\");\n    return true;\n  } //if nothing \n\n\n  return false;\n}","map":{"version":3,"sources":["/Users/michaeldipaolo/Desktop/michaeldipaolo.com/my-next/reducers/GameState.js"],"names":["initialState","board","turn","players","gameOver","xWins","oWins","whosTurn","state","action","type","newBoard","location","x","y","makeMove","player","score","check","console","log"],"mappings":";;;;;;;;;;;;AAAA,IAAMA,YAAY,GAAG;AACjBC,EAAAA,KAAK,EACL,CACI,CAAE,GAAF,EAAQ,GAAR,EAAc,GAAd,CADJ,EAEI,CAAE,GAAF,EAAQ,GAAR,EAAc,GAAd,CAFJ,EAGI,CAAE,GAAF,EAAQ,GAAR,EAAc,GAAd,CAHJ,CAFiB;AAOjBC,EAAAA,IAAI,EAAE,CAPW;AAQjBC,EAAAA,OAAO,EAAE,CARQ;AASjBC,EAAAA,QAAQ,EAAE,KATO;AAUjBC,EAAAA,KAAK,EAAE,CAVU;AAWjBC,EAAAA,KAAK,EAAE,CAXU;AAYjBC,EAAAA,QAAQ,EAAE;AAZO,CAArB;AAeA,eAAe,YAAuC;AAAA,MAA9BC,KAA8B,uEAAtBR,YAAsB;AAAA,MAARS,MAAQ;;AAElD,UAAOA,MAAM,CAACC,IAAd;AAEI,SAAK,WAAL;AAEI,UAAGF,KAAK,CAACJ,QAAN,KAAmB,IAAtB,EAA2B;AACvB,eAAOI,KAAP;AACH,OAFD,MAGI;AACA,YAAMG,QAAQ,GAAGH,KAAK,CAACP,KAAvB;;AACA,YAAGU,QAAQ,CAACF,MAAM,CAACG,QAAP,CAAgBC,CAAjB,CAAR,CAA4BJ,MAAM,CAACG,QAAP,CAAgBE,CAA5C,MAAmD,GAAtD,EAA0D;AACtD,iBAAON,KAAP;AACH,SAFD,MAGI;AACA,cAAGA,KAAK,CAACN,IAAN,GAAW,CAAX,KAAiB,CAApB,EAAsB;AAClBS,YAAAA,QAAQ,CAACF,MAAM,CAACG,QAAP,CAAgBC,CAAjB,CAAR,CAA4BJ,MAAM,CAACG,QAAP,CAAgBE,CAA5C,IAAiD,GAAjD;AACA,mBAAOC,QAAQ,CAACP,KAAD,EAAQG,QAAR,EAAkB,GAAlB,CAAf;AACH,WAHD,MAII;AACAA,YAAAA,QAAQ,CAACF,MAAM,CAACG,QAAP,CAAgBC,CAAjB,CAAR,CAA4BJ,MAAM,CAACG,QAAP,CAAgBE,CAA5C,IAAiD,GAAjD;AACA,mBAAOC,QAAQ,CAACP,KAAD,EAAQG,QAAR,EAAkB,GAAlB,CAAf;AACH;AACJ;AACJ;;AAGL,SAAK,sBAAL;AACI,+BACOH,KADP;AAEIN,QAAAA,IAAI,EAAEM,KAAK,CAACN,IAAN,GAAa;AAFvB;;AAKJ;AACI,aAAOM,KAAP;AAhCR;AAmCH;;AAGD,SAASO,QAAT,CAAkBP,KAAlB,EAAyBG,QAAzB,EAAmCK,MAAnC,EAA0C;AACtC,MAAIC,KAAK,GAAGT,KAAK,CAACH,KAAlB;AACA,MAAID,QAAQ,GAAGI,KAAK,CAACJ,QAArB;;AAEA,MAAGc,KAAK,CAACP,QAAD,EAAWK,MAAX,CAAL,KAA4B,IAA/B,EAAqC;AACjCC,IAAAA,KAAK,IAAG,CAAR;AACAb,IAAAA,QAAQ,GAAG,IAAX;AACH;;AAED,MAAGI,KAAK,CAACD,QAAN,KAAmB,GAAtB,EAA0B;AACtBC,IAAAA,KAAK,CAACD,QAAN,GAAiB,GAAjB;AACH,GAFD,MAGI;AACAC,IAAAA,KAAK,CAACD,QAAN,GAAiB,GAAjB;AACH;;AAED,MAAGS,MAAM,KAAK,GAAd,EAAkB;AACd,6BACWR,KADX;AAEQN,MAAAA,IAAI,EAAEM,KAAK,CAACN,IAAN,GAAa,CAF3B;AAGQD,MAAAA,KAAK,EAAEU,QAHf;AAIQP,MAAAA,QAAQ,EAAEA,QAJlB;AAKQC,MAAAA,KAAK,EAAEY;AALf;AAOH,GARD,MASI;AACA,6BACOT,KADP;AAEIN,MAAAA,IAAI,EAAEM,KAAK,CAACN,IAAN,GAAa,CAFvB;AAGID,MAAAA,KAAK,EAAEU,QAHX;AAIIP,MAAAA,QAAQ,EAAEA,QAJd;AAKIE,MAAAA,KAAK,EAAEW;AALX;AAOH;AAGJ;;AAGD,SAASC,KAAT,CAAejB,KAAf,EAAsBe,MAAtB,EAA6B;AAEzB;AACA,OAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAE,CAAnB,EAAsBA,CAAC,EAAvB,EAA0B;AACtB,QACIZ,KAAK,CAACY,CAAD,CAAL,CAAS,CAAT,MAAgBG,MAAhB,IACAf,KAAK,CAACY,CAAD,CAAL,CAAS,CAAT,MAAgBG,MADhB,IAEAf,KAAK,CAACY,CAAD,CAAL,CAAS,CAAT,MAAgBG,MAHpB,EAII;AACIG,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAM,GAAG,QAArB;AACA,aAAO,IAAP;AACP;AACJ,GAbwB,CAezB;;;AACA,OAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAE,CAAnB,EAAsBA,CAAC,EAAvB,EAA0B;AACtB,QACIb,KAAK,CAAC,CAAD,CAAL,CAASa,CAAT,MAAgBE,MAAhB,IACAf,KAAK,CAAC,CAAD,CAAL,CAASa,CAAT,MAAgBE,MADhB,IAEAf,KAAK,CAAC,CAAD,CAAL,CAASa,CAAT,MAAgBE,MAHpB,EAII;AACIG,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAM,GAAG,QAArB;AACA,aAAO,IAAP;AACP;AACJ,GA1BwB,CA4BzB;;;AACA,MACIf,KAAK,CAAC,CAAD,CAAL,CAAS,CAAT,MAAgBe,MAAhB,IACAf,KAAK,CAAC,CAAD,CAAL,CAAS,CAAT,MAAgBe,MADhB,IAEAf,KAAK,CAAC,CAAD,CAAL,CAAS,CAAT,MAAgBe,MAHpB,EAII;AACIG,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAM,GAAG,QAArB;AACA,WAAO,IAAP;AACP,GArCwB,CAuCzB;;;AACA,MACIf,KAAK,CAAC,CAAD,CAAL,CAAS,CAAT,MAAgBe,MAAhB,IACAf,KAAK,CAAC,CAAD,CAAL,CAAS,CAAT,MAAgBe,MADhB,IAEAf,KAAK,CAAC,CAAD,CAAL,CAAS,CAAT,MAAgBe,MAHpB,EAII;AACIG,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAM,GAAG,QAArB;AACA,WAAO,IAAP;AACP,GAhDwB,CAkDzB;;;AACA,SAAO,KAAP;AACH","sourcesContent":["const initialState = {  \r\n    board: \r\n    [\r\n        [ \" \" , \" \" , \" \" ],\r\n        [ \" \" , \" \" , \" \" ],\r\n        [ \" \" , \" \" , \" \" ]\r\n    ],\r\n    turn: 0,\r\n    players: 2,\r\n    gameOver: false,\r\n    xWins: 0,\r\n    oWins: 0,\r\n    whosTurn: \"X\" \r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n\r\n    switch(action.type){\r\n        \r\n        case \"MAKE_MOVE\":\r\n\r\n            if(state.gameOver === true){\r\n                return state\r\n            }\r\n            else{\r\n                const newBoard = state.board;\r\n                if(newBoard[action.location.x][action.location.y] !== \" \"){\r\n                    return state\r\n                }\r\n                else{\r\n                    if(state.turn%2 === 0){\r\n                        newBoard[action.location.x][action.location.y] = \"X\";  \r\n                        return makeMove(state, newBoard, \"X\");\r\n                    }\r\n                    else{\r\n                        newBoard[action.location.x][action.location.y] = \"0\"; \r\n                        return makeMove(state, newBoard, \"0\");\r\n                    }  \r\n                }\r\n            }\r\n\r\n\r\n        case \"DEBUG_INCREMENT_TURN\":\r\n            return {\r\n                ...state,\r\n                turn: state.turn + 1\r\n            }\r\n\r\n        default:\r\n            return state   \r\n    }\r\n    \r\n}\r\n\r\n\r\nfunction makeMove(state, newBoard, player){\r\n    let score = state.xWins\r\n    let gameOver = state.gameOver\r\n    \r\n    if(check(newBoard, player) === true) {\r\n        score +=1;\r\n        gameOver = true;\r\n    }\r\n\r\n    if(state.whosTurn === \"X\"){\r\n        state.whosTurn = \"0\"\r\n    }\r\n    else{\r\n        state.whosTurn = \"X\"\r\n    }\r\n\r\n    if(player === \"X\"){\r\n        return {\r\n                ...state,\r\n                turn: state.turn + 1,\r\n                board: newBoard,\r\n                gameOver: gameOver,\r\n                xWins: score,\r\n            }\r\n    }\r\n    else{\r\n        return {\r\n            ...state,\r\n            turn: state.turn + 1,\r\n            board: newBoard,\r\n            gameOver: gameOver,\r\n            oWins: score,\r\n        }\r\n    }\r\n\r\n    \r\n}\r\n\r\n\r\nfunction check(board, player){\r\n\r\n    //check x \r\n    for (let x = 0; x <3; x++){\r\n        if(\r\n            board[x][0] === player &&\r\n            board[x][1] === player &&\r\n            board[x][2] === player )\r\n            {\r\n                console.log(\"game over\");\r\n                console.log(player + \" wins!\")\r\n                return true\r\n        }\r\n    }\r\n\r\n    //check y\r\n    for (let y = 0; y <3; y++){\r\n        if(\r\n            board[0][y] === player &&\r\n            board[1][y] === player &&\r\n            board[2][y] === player )\r\n            {\r\n                console.log(\"game over\");\r\n                console.log(player + \" wins!\")\r\n                return true\r\n        }\r\n    }\r\n\r\n    //diagnal 1\r\n    if(\r\n        board[0][0] === player &&\r\n        board[1][1] === player &&\r\n        board[2][2] === player )\r\n        {\r\n            console.log(\"game over\");\r\n            console.log(player + \" wins!\")\r\n            return true\r\n    }\r\n\r\n    //diagnal 2\r\n    if(\r\n        board[0][2] === player &&\r\n        board[1][1] === player &&\r\n        board[2][0] === player )\r\n        {\r\n            console.log(\"game over!\");\r\n            console.log(player + \" wins!\")\r\n            return true\r\n    }\r\n\r\n    //if nothing \r\n    return false\r\n}"]},"metadata":{},"sourceType":"module"}