{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/michaeldipaolo/Desktop/michaeldipaolo.com/my-next/components/beer/country.js\";\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { Pie } from \"react-chartjs-2\";\nimport { MDBContainer } from \"mdbreact\"; //gets the unique countries in the object\n\nvar getUnqiue = function getUnqiue(object, key) {\n  var allElements = object.map(function (x) {\n    return x[key];\n  });\n\n  var unqiueElements = _toConsumableArray(new Set(allElements));\n\n  return unqiueElements;\n}; //gets how many times those unique elements show up in the object\n\n\nvar getValues = function getValues(beer, key, labels) {\n  var allBeer = beer.map(function (x) {\n    return x[key];\n  });\n  var values = [];\n  labels.forEach(function (element) {\n    return values.push(allBeer.filter(function (v) {\n      return v === element;\n    }).length);\n  });\n  return values;\n};\n\nvar Country = function Country(props) {\n  var labels = getUnqiue(props.beer, \"country\");\n  var data = getValues(props.beer, \"country\", labels); //todo create a way to make the background match the country flags but this is fine for now just to get a working example\n\n  var colors = [\"red\", \"blue\", \"yellow\", \"green\", \"orange\", \"purple\", \"navy\", \"brown\", \"skyblue\", \"salmon\", \"orangered\", \"olive\", \"mediumorchid\", \"maroon\", \"lime\", \"pink\", \"goldenrod\", \"firebrick\", \"darkcyan\", \"cornflowerblue\", \"chocolate\", \"firebrick\", \"darkcyan\", \"cornflowerblue\", \"chocolate\"];\n  var asdf = {\n    dataPie: {\n      labels: labels,\n      datasets: [{\n        data: data,\n        backgroundColor: colors,\n        hoverBackgroundColor: colors\n      }]\n    }\n  };\n  return __jsx(MDBContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, __jsx(\"h3\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, \"Country of Origin\"), __jsx(Pie, {\n    data: asdf.dataPie,\n    options: {\n      responsive: true\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }));\n};\n\n_c = Country;\nexport default Country;\n\nvar _c;\n\n$RefreshReg$(_c, \"Country\");","map":{"version":3,"sources":["/Users/michaeldipaolo/Desktop/michaeldipaolo.com/my-next/components/beer/country.js"],"names":["React","Pie","MDBContainer","getUnqiue","object","key","allElements","map","x","unqiueElements","Set","getValues","beer","labels","allBeer","values","forEach","element","push","filter","v","length","Country","props","data","colors","asdf","dataPie","datasets","backgroundColor","hoverBackgroundColor","responsive"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,SAASC,YAAT,QAA6B,UAA7B,C,CAEA;;AACA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,MAAD,EAASC,GAAT,EAAiB;AACjC,MAAMC,WAAW,GAAGF,MAAM,CAACG,GAAP,CAAW,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAACH,GAAD,CAAL;AAAA,GAAZ,CAApB;;AACA,MAAMI,cAAc,sBAAO,IAAIC,GAAJ,CAAQJ,WAAR,CAAP,CAApB;;AACA,SAAOG,cAAP;AACD,CAJD,C,CAMA;;;AACA,IAAME,SAAS,GAAG,SAAZA,SAAY,CAACC,IAAD,EAAOP,GAAP,EAAYQ,MAAZ,EAAuB;AACvC,MAAMC,OAAO,GAAGF,IAAI,CAACL,GAAL,CAAS,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAACH,GAAD,CAAL;AAAA,GAAV,CAAhB;AAEA,MAAIU,MAAM,GAAG,EAAb;AACAF,EAAAA,MAAM,CAACG,OAAP,CAAe,UAAAC,OAAO;AAAA,WACpBF,MAAM,CAACG,IAAP,CAAYJ,OAAO,CAACK,MAAR,CAAe,UAAAC,CAAC;AAAA,aAAIA,CAAC,KAAKH,OAAV;AAAA,KAAhB,EAAmCI,MAA/C,CADoB;AAAA,GAAtB;AAIA,SAAON,MAAP;AACD,CATD;;AAWA,IAAMO,OAAO,GAAG,SAAVA,OAAU,CAAAC,KAAK,EAAI;AACvB,MAAMV,MAAM,GAAGV,SAAS,CAACoB,KAAK,CAACX,IAAP,EAAa,SAAb,CAAxB;AACA,MAAMY,IAAI,GAAGb,SAAS,CAACY,KAAK,CAACX,IAAP,EAAa,SAAb,EAAwBC,MAAxB,CAAtB,CAFuB,CAGvB;;AACA,MAAMY,MAAM,GAAG,CACb,KADa,EAEb,MAFa,EAGb,QAHa,EAIb,OAJa,EAKb,QALa,EAMb,QANa,EAOb,MAPa,EAQb,OARa,EASb,SATa,EAUb,QAVa,EAWb,WAXa,EAYb,OAZa,EAab,cAba,EAcb,QAda,EAeb,MAfa,EAgBb,MAhBa,EAiBb,WAjBa,EAkBb,WAlBa,EAmBb,UAnBa,EAoBb,gBApBa,EAqBb,WArBa,EAsBb,WAtBa,EAuBb,UAvBa,EAwBb,gBAxBa,EAyBb,WAzBa,CAAf;AA4BA,MAAMC,IAAI,GAAG;AACXC,IAAAA,OAAO,EAAE;AACPd,MAAAA,MAAM,EAAEA,MADD;AAEPe,MAAAA,QAAQ,EAAE,CACR;AACEJ,QAAAA,IAAI,EAAEA,IADR;AAEEK,QAAAA,eAAe,EAAEJ,MAFnB;AAGEK,QAAAA,oBAAoB,EAAEL;AAHxB,OADQ;AAFH;AADE,GAAb;AAaA,SACE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,EAEE,MAAC,GAAD;AAAK,IAAA,IAAI,EAAEC,IAAI,CAACC,OAAhB;AAAyB,IAAA,OAAO,EAAE;AAAEI,MAAAA,UAAU,EAAE;AAAd,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD,CAnDD;;KAAMT,O;AAqDN,eAAeA,OAAf","sourcesContent":["import React from \"react\";\nimport { Pie } from \"react-chartjs-2\";\nimport { MDBContainer } from \"mdbreact\";\n\n//gets the unique countries in the object\nconst getUnqiue = (object, key) => {\n  const allElements = object.map(x => x[key]);\n  const unqiueElements = [...new Set(allElements)];\n  return unqiueElements;\n};\n\n//gets how many times those unique elements show up in the object\nconst getValues = (beer, key, labels) => {\n  const allBeer = beer.map(x => x[key]);\n\n  let values = [];\n  labels.forEach(element =>\n    values.push(allBeer.filter(v => v === element).length)\n  );\n\n  return values;\n};\n\nconst Country = props => {\n  const labels = getUnqiue(props.beer, \"country\");\n  const data = getValues(props.beer, \"country\", labels);\n  //todo create a way to make the background match the country flags but this is fine for now just to get a working example\n  const colors = [\n    \"red\",\n    \"blue\",\n    \"yellow\",\n    \"green\",\n    \"orange\",\n    \"purple\",\n    \"navy\",\n    \"brown\",\n    \"skyblue\",\n    \"salmon\",\n    \"orangered\",\n    \"olive\",\n    \"mediumorchid\",\n    \"maroon\",\n    \"lime\",\n    \"pink\",\n    \"goldenrod\",\n    \"firebrick\",\n    \"darkcyan\",\n    \"cornflowerblue\",\n    \"chocolate\",\n    \"firebrick\",\n    \"darkcyan\",\n    \"cornflowerblue\",\n    \"chocolate\"\n  ];\n\n  const asdf = {\n    dataPie: {\n      labels: labels,\n      datasets: [\n        {\n          data: data,\n          backgroundColor: colors,\n          hoverBackgroundColor: colors\n        }\n      ]\n    }\n  };\n\n  return (\n    <MDBContainer>\n      <h3>Country of Origin</h3>\n      <Pie data={asdf.dataPie} options={{ responsive: true }} />\n    </MDBContainer>\n  );\n};\n\nexport default Country;\n"]},"metadata":{},"sourceType":"module"}