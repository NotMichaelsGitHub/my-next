{"ast":null,"code":"var _jsxFileName = \"/Users/michaeldipaolo/Desktop/michaeldipaolo.com/my-next/components/beer/types.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Pie } from \"react-chartjs-2\";\nimport { MDBContainer } from \"mdbreact\"; //gets the unique countries in the object\n\nconst getUnqiue = (object, key) => {\n  const allElements = object.map(x => x[key]);\n  const unqiueElements = [...new Set(allElements)];\n  return unqiueElements;\n}; //gets how many times those unique elements show up in the object \n\n\nconst getValues = (beer, key, labels) => {\n  const allBeer = beer.map(x => x[key]);\n  let values = [];\n  labels.forEach(element => values.push(allBeer.filter(v => v === element).length));\n  return values;\n};\n\nconst Types = props => {\n  const labels = getUnqiue(props.beer, 'type');\n  const data = getValues(props.beer, 'type', labels);\n  const colors = [\"red\", \"blue\", \"yellow\", \"green\", \"orange\", \"purple\", \"navy\", \"brown\", \"skyblue\", \"salmon\", \"orangered\", \"olive\", \"mediumorchid\", \"maroon\", \"lime\", \"pink\", \"goldenrod\", \"firebrick\", \"darkcyan\", \"cornflowerblue\", \"chocolate\", \"firebrick\", \"darkcyan\", \"cornflowerblue\", \"chocolate\"];\n  const asdf = {\n    dataPie: {\n      labels: labels,\n      datasets: [{\n        data: data,\n        backgroundColor: colors,\n        hoverBackgroundColor: colors\n      }]\n    }\n  };\n  return __jsx(MDBContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, __jsx(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"Types of Beer\"), __jsx(Pie, {\n    data: asdf.dataPie,\n    options: {\n      responsive: true\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }));\n};\n\nexport default Types;","map":{"version":3,"sources":["/Users/michaeldipaolo/Desktop/michaeldipaolo.com/my-next/components/beer/types.js"],"names":["React","Pie","MDBContainer","getUnqiue","object","key","allElements","map","x","unqiueElements","Set","getValues","beer","labels","allBeer","values","forEach","element","push","filter","v","length","Types","props","data","colors","asdf","dataPie","datasets","backgroundColor","hoverBackgroundColor","responsive"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,SAASC,YAAT,QAA6B,UAA7B,C,CAEA;;AACA,MAAMC,SAAS,GAAG,CAACC,MAAD,EAASC,GAAT,KAAiB;AACjC,QAAMC,WAAW,GAAGF,MAAM,CAACG,GAAP,CAAWC,CAAC,IAAIA,CAAC,CAACH,GAAD,CAAjB,CAApB;AACA,QAAMI,cAAc,GAAI,CAAC,GAAI,IAAIC,GAAJ,CAAQJ,WAAR,CAAL,CAAxB;AACA,SAAOG,cAAP;AACD,CAJD,C,CAMA;;;AACA,MAAME,SAAS,GAAG,CAACC,IAAD,EAAOP,GAAP,EAAYQ,MAAZ,KAAsB;AACtC,QAAMC,OAAO,GAAGF,IAAI,CAACL,GAAL,CAASC,CAAC,IAAIA,CAAC,CAACH,GAAD,CAAf,CAAhB;AAEA,MAAIU,MAAM,GAAG,EAAb;AACAF,EAAAA,MAAM,CAACG,OAAP,CAAeC,OAAO,IAAIF,MAAM,CAACG,IAAP,CACtBJ,OAAO,CAACK,MAAR,CAAgBC,CAAD,IAAQA,CAAC,KAAKH,OAA7B,EAAuCI,MADjB,CAA1B;AAKA,SAAON,MAAP;AACD,CAVD;;AAYA,MAAMO,KAAK,GAAIC,KAAD,IAAW;AAEvB,QAAMV,MAAM,GAAGV,SAAS,CAACoB,KAAK,CAACX,IAAP,EAAa,MAAb,CAAxB;AACA,QAAMY,IAAI,GAAGb,SAAS,CAACY,KAAK,CAACX,IAAP,EAAa,MAAb,EAAqBC,MAArB,CAAtB;AACA,QAAMY,MAAM,GAAG,CACb,KADa,EAEb,MAFa,EAGb,QAHa,EAIb,OAJa,EAKb,QALa,EAMb,QANa,EAOb,MAPa,EAQb,OARa,EASb,SATa,EAUb,QAVa,EAWb,WAXa,EAYb,OAZa,EAab,cAba,EAcb,QAda,EAeb,MAfa,EAgBb,MAhBa,EAiBb,WAjBa,EAkBb,WAlBa,EAmBb,UAnBa,EAoBb,gBApBa,EAqBb,WArBa,EAsBb,WAtBa,EAuBb,UAvBa,EAwBb,gBAxBa,EAyBb,WAzBa,CAAf;AA4BA,QAAMC,IAAI,GAAG;AACXC,IAAAA,OAAO,EAAE;AACPd,MAAAA,MAAM,EAAEA,MADD;AAEPe,MAAAA,QAAQ,EAAE,CACR;AACEJ,QAAAA,IAAI,EAAEA,IADR;AAEEK,QAAAA,eAAe,EAAEJ,MAFnB;AAGEK,QAAAA,oBAAoB,EAAEL;AAHxB,OADQ;AAFH;AADE,GAAb;AAaA,SACE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE,MAAC,GAAD;AAAK,IAAA,IAAI,EAAEC,IAAI,CAACC,OAAhB;AAAyB,IAAA,OAAO,EAAE;AAAEI,MAAAA,UAAU,EAAE;AAAd,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD,CAnDD;;AAqDA,eAAgBT,KAAhB","sourcesContent":["import React from 'react';\nimport { Pie } from \"react-chartjs-2\";\nimport { MDBContainer } from \"mdbreact\";\n\n//gets the unique countries in the object\nconst getUnqiue = (object, key) => {\n  const allElements = object.map(x => x[key]);\n  const unqiueElements = ([... new Set(allElements)]);\n  return unqiueElements;\n}\n\n//gets how many times those unique elements show up in the object \nconst getValues = (beer, key, labels) =>{\n  const allBeer = beer.map(x => x[key]);\n\n  let values = [];\n  labels.forEach(element => values.push(\n      allBeer.filter((v) => (v === element)).length\n    )\n  );\n\n  return values;\n}\n\nconst Types = (props) => {\n\n  const labels = getUnqiue(props.beer, 'type');\n  const data = getValues(props.beer, 'type', labels);\n  const colors = [\n    \"red\",\n    \"blue\",\n    \"yellow\",\n    \"green\",\n    \"orange\",\n    \"purple\",\n    \"navy\",\n    \"brown\",\n    \"skyblue\",\n    \"salmon\",\n    \"orangered\",\n    \"olive\",\n    \"mediumorchid\",\n    \"maroon\",\n    \"lime\",\n    \"pink\",\n    \"goldenrod\",\n    \"firebrick\",\n    \"darkcyan\",\n    \"cornflowerblue\",\n    \"chocolate\",   \n    \"firebrick\",\n    \"darkcyan\",\n    \"cornflowerblue\",\n    \"chocolate\",\n  ];\n\n  const asdf = {\n    dataPie: {\n      labels: labels,\n      datasets: [\n        {\n          data: data,\n          backgroundColor: colors,\n          hoverBackgroundColor: colors\n        }\n      ]\n    }\n  }\n\n  return (\n    <MDBContainer>\n      <h3>Types of Beer</h3>\n      <Pie data={asdf.dataPie} options={{ responsive: true }} />\n    </MDBContainer>\n  )\n}\n\nexport default (Types);"]},"metadata":{},"sourceType":"module"}