{"ast":null,"code":"var _jsxFileName = \"/Users/michaeldipaolo/Desktop/michaeldipaolo.com/my-next/components/beer/table.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { useTable, useSortBy } from 'react-table'; // function Table({ columns, data }) {\n//     const {\n//       getTableProps,\n//       getTableBodyProps,\n//       headerGroups,\n//       rows,\n//       prepareRow,\n//     } = useTable(\n//       {\n//         columns,\n//         data,\n//       },\n//       useSortBy\n//     )\n//     // We don't want to render all 2000 rows for this example, so cap\n//     // it at 20 for this use case\n//     const firstPageRows = rows.slice(0, 20)\n//     return (\n//       <>\n//         <table {...getTableProps()}>\n//           <thead>\n//             {headerGroups.map(headerGroup => (\n//               <tr {...headerGroup.getHeaderGroupProps()}>\n//                 {headerGroup.headers.map(column => (\n//                   // Add the sorting props to control sorting. For this example\n//                   // we can add them into the header props\n//                   <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n//                     {column.render('Header')}\n//                     {/* Add a sort direction indicator */}\n//                     <span>\n//                       {column.isSorted\n//                         ? column.isSortedDesc\n//                           ? ' ðŸ”½'\n//                           : ' ðŸ”¼'\n//                         : ''}\n//                     </span>\n//                   </th>\n//                 ))}\n//               </tr>\n//             ))}\n//           </thead>\n//           <tbody {...getTableBodyProps()}>\n//             {firstPageRows.map(\n//               (row, i) => {\n//                 prepareRow(row);\n//                 return (\n//                   <tr {...row.getRowProps()}>\n//                     {row.cells.map(cell => {\n//                       return (\n//                         <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n//                       )\n//                     })}\n//                   </tr>\n//                 )}\n//             )}\n//           </tbody>\n//         </table>\n//       </>\n//     )\n// }\n\nconst Tbl = beer => {\n  const columns = React.useMemo(() => [{\n    Header: 'Beer',\n    columns: [{\n      Header: 'Name',\n      accessor: 'firstName'\n    }, {\n      Header: 'Type',\n      accessor: 'lastName'\n    }]\n  }], []);\n  console.log(beer);\n  const data = beer.allbeer;\n  return (// <Table columns={columns} data={data} />\n    __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"able\")\n  );\n};\n\nexport default Tbl;","map":{"version":3,"sources":["/Users/michaeldipaolo/Desktop/michaeldipaolo.com/my-next/components/beer/table.js"],"names":["React","useTable","useSortBy","Tbl","beer","columns","useMemo","Header","accessor","console","log","data","allbeer"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,aAApC,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,GAAG,GAAIC,IAAD,IAAU;AACpB,QAAMC,OAAO,GAAGL,KAAK,CAACM,OAAN,CACd,MAAM,CACF;AACIC,IAAAA,MAAM,EAAE,MADZ;AAEIF,IAAAA,OAAO,EAAE,CACP;AACEE,MAAAA,MAAM,EAAE,MADV;AAEEC,MAAAA,QAAQ,EAAE;AAFZ,KADO,EAKP;AACED,MAAAA,MAAM,EAAE,MADV;AAEEC,MAAAA,QAAQ,EAAE;AAFZ,KALO;AAFb,GADE,CADQ,EAgBd,EAhBc,CAAhB;AAmBAC,EAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AAEI,QAAMO,IAAI,GAAGP,IAAI,CAACQ,OAAlB;AAEA,SACE;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAIL,CA5BD;;AA8BA,eAAgBT,GAAhB","sourcesContent":["import React from 'react';\nimport { useTable, useSortBy } from 'react-table';\n\n// function Table({ columns, data }) {\n//     const {\n//       getTableProps,\n//       getTableBodyProps,\n//       headerGroups,\n//       rows,\n//       prepareRow,\n//     } = useTable(\n//       {\n//         columns,\n//         data,\n//       },\n//       useSortBy\n//     )\n  \n//     // We don't want to render all 2000 rows for this example, so cap\n//     // it at 20 for this use case\n//     const firstPageRows = rows.slice(0, 20)\n  \n//     return (\n//       <>\n//         <table {...getTableProps()}>\n//           <thead>\n//             {headerGroups.map(headerGroup => (\n//               <tr {...headerGroup.getHeaderGroupProps()}>\n//                 {headerGroup.headers.map(column => (\n//                   // Add the sorting props to control sorting. For this example\n//                   // we can add them into the header props\n//                   <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n//                     {column.render('Header')}\n//                     {/* Add a sort direction indicator */}\n//                     <span>\n//                       {column.isSorted\n//                         ? column.isSortedDesc\n//                           ? ' ðŸ”½'\n//                           : ' ðŸ”¼'\n//                         : ''}\n//                     </span>\n//                   </th>\n//                 ))}\n//               </tr>\n//             ))}\n//           </thead>\n//           <tbody {...getTableBodyProps()}>\n//             {firstPageRows.map(\n//               (row, i) => {\n//                 prepareRow(row);\n//                 return (\n//                   <tr {...row.getRowProps()}>\n//                     {row.cells.map(cell => {\n//                       return (\n//                         <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n//                       )\n//                     })}\n//                   </tr>\n//                 )}\n//             )}\n//           </tbody>\n//         </table>\n//       </>\n//     )\n// }\n\nconst Tbl = (beer) => {\n  const columns = React.useMemo(\n    () => [\n        {\n            Header: 'Beer',\n            columns: [\n              {\n                Header: 'Name',\n                accessor: 'firstName',\n              },\n              {\n                Header: 'Type',\n                accessor: 'lastName',\n              },\n            ],\n        },\n      ],\n    []\n  )\n\n  console.log(beer);\n    \n      const data = beer.allbeer;\n    \n      return (\n        // <Table columns={columns} data={data} />\n        <p>able</p>\n      )\n}\n\nexport default (Tbl);"]},"metadata":{},"sourceType":"module"}